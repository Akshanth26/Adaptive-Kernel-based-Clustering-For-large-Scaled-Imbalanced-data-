import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

def visualize_kmeans_landmarks(data_path, num_landmarks=5, random_state=42):
    """
    Visualizes K-Means clustering for landmark selection.

    Args:
        data_path (str): Path to the CSV file.
        num_landmarks (int): Number of landmarks (clusters) to identify.
        random_state (int): Random state for reproducibility.
    """

    # Load the dataset
    data = pd.read_csv(data_path)

    # Drop irrelevant features if they exist
    columns_to_drop = ['Time', 'ID']
    columns_to_drop_existing = [col for col in columns_to_drop if col in data.columns]
    data.drop(columns_to_drop_existing, axis=1, inplace=True)

    # Separate features and target variable
    X = data.drop('Class', axis=1)

    # Standardize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Apply K-Means clustering
    kmeans = KMeans(n_clusters=num_landmarks, random_state=random_state)
    kmeans.fit(X_scaled)

    # Get the cluster centers (landmarks)
    landmarks = kmeans.cluster_centers_

    # Plot the data points and landmarks (using first 2 features for 2D visualization)
    plt.figure(figsize=(10, 6))
    plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans.labels_, cmap='viridis', alpha=0.5, label='Data Points')
    plt.scatter(landmarks[:, 0], landmarks[:, 1], c='red', marker='x', s=200, label='Landmarks')
    plt.title('K-Means Clustering for Landmark Selection')
    plt.xlabel('Feature 1 (Scaled)')
    plt.ylabel('Feature 2 (Scaled)')
    plt.legend()
    plt.show()

# Example Usage:
data_path = "creditcard.csv"
visualize_kmeans_landmarks(data_path, num_landmarks=5) # Adjust num_landmarks as needed
